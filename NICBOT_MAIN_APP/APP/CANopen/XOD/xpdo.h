/**************************************************************************
MODULE:    XPDO
CONTAINS:  MicroCANopen Plus implementation of dynmaic PDO mapping
COPYRIGHT: Embedded Systems Academy, Inc. 2002-2016
           All rights reserved. www.microcanopen.com
DISCLAIM:  Read and understand our disclaimer before using this code!
           www.esacademy.com/disclaim.htm
           This software was written in accordance to the guidelines at
           www.esacademy.com/software/softwarestyleguide.pdf
LICENSE:   THIS IS THE COMMERCIAL PLUS VERSION OF MICROCANOPEN
           ONLY USERS WHO PURCHASED A LICENSE MAY USE THIS SOFTWARE
           See file license_commercial_plus.txt
VERSION:   6.21, ESA 16-JUN-16
           $LastChangedDate: 2016-02-16 22:14:13 +0100 (Tue, 16 Feb 2016) $
           $LastChangedRevision: 3568 $
***************************************************************************/ 

#ifndef _XPDO_H
#define _XPDO_H

#ifdef __cplusplus
extern "C" {
#endif

#include "mco.h"


/**************************************************************************
DOES:    Receive RPDO Data and copy to destination, depending on mapping
NOTE:    Must be used instead of the standard PDO_RXCOPY macro if the
         dynamic PDO option is enabled.
         Might require extra locking in RTOS environment.
***************************************************************************/ 
UNSIGNED8 PDO_RXCOPY_fct ( 
  UNSIGNED16 RPDONr, // PDO number, as index from 0 to NR_OF_xPDOS-1
  UNSIGNED8 *pSrc // Pointer to data received
  );


/**************************************************************************
DOES:    Get TPDO Data and copy to CAN message, depending on mapping
NOTE:    Must be used instead of the standard PDO_TXCOPY macro if the
         dynamic PDO option is enabled.
         Might require extra locking in RTOS environment.
***************************************************************************/ 
UNSIGNED8 PDO_TXCOPY_fct ( 
  UNSIGNED16 TPDONr, //  PDO number, as index from 0 to NR_OF_xPDOS-1
  UNSIGNED8 *pDest // Pointer to transmission buffer
  );


/**************************************************************************
DOES:    Get TPDO Data and compare, depending on mapping
         used for change-of-state detection
NOTE:    Must be used instead of the standard PDO_TXCOMP macro if the
         dynamic PDO option is enabled.
         Might require extra locking in RTOS environment.
***************************************************************************/ 
UNSIGNED8 PDO_TXCOMP_fct ( 
  UNSIGNED16 TPDONr, //  PDO number, as index from 0 to NR_OF_xPDOS-1
  UNSIGNED8 *pDest // Pointer to transmission buffer
  );


/**************************************************************************
DOES:     RESETS SINGLE PDO MAPPING ENTRY TO DEFAULT (HARDCODED)
          Call this to restore the default PDO mapping from original
          Object Dictionary (typically generated by CANopenArchitectEDS)
RETURNS:  TRUE, if PDO found and reset, 
          FALSE, if PDO not implemented
***************************************************************************/
UNSIGNED8 XPDO_ResetPDOMapEntry (
  UNSIGNED8 TxRx, // Set to 0 for TPDO, 1 for RPDO
  UNSIGNED16 PDONr // Number of PDO, 1 to 512
  );


/**************************************************************************
DOES:     Makes a single PDO mapping entry.
          Set EntryNr to zero and Length to number of entries mapped, to 
          set the number of mapping entries for this PDO.
          After all entries for a PDO have been made, call
          XPDO_UpdatePDOMapping() to activate mapping.
RETURNS:  TRUE, if PDO found and set, 
          FALSE, if PDO not implemented
***************************************************************************/
UNSIGNED8 XPDO_SetPDOMapEntry (
  UNSIGNED8 TxRx, // Set to 0 for TPDO, 1 for RPDO
  UNSIGNED16 PDONr, // Number of PDO, 1 to 512
  UNSIGNED8 EntryNr, // Mapping entry (0 to 8)
  UNSIGNED16 Index, // Index of OD entry to be mapped
  UNSIGNED8 SubIdx, // Subindex of OD entry to be mapped
  UNSIGNED8 Length // Length of OD entry to be mapped (in bytes)
  );


/**************************************************************************
DOES:     Activate PDO mapping, this function must be called AFTER changes
          have been made to a PDO mapping using XPDO_SetPDOMapEntry().
RETURNS:  Nothing.
***************************************************************************/
void XPDO_UpdatePDOMapping (
  UNSIGNED8 TxRx, // Set to 0 for TPDO, 1 for RPDO
  UNSIGNED16 PDONr // PDO number
  );

#ifdef __cplusplus
}
#endif

#endif // _XPDO_H
/**************************************************************************
END OF FILE
**************************************************************************/
